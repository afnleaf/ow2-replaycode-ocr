
#FROM python:3.11-slim
#FROM pytorch/pytorch:2.1.0-cuda12.1-cudnn8-runtime
#
#WORKDIR /app
#
## Create model data directory
##RUN mkdir -p /app/model-data
#
## Install system dependencies
##RUN apt-get update && apt-get install -y \
#RUN apt-get update && apt-get install -y --no-install-recommends \
#    libsm6 \
#    libxext6 \
#    libxrender-dev \
#    libopencv-dev \
#    tesseract-ocr \
#    && rm -rf /var/lib/apt/lists/*
#
## Install Python dependencies
#COPY requirements.txt .
#RUN pip install --no-cache-dir -r requirements.txt
#
## Copy application files
#COPY src ./src
#COPY images ./images
#
##CMD [ "python", "./src/main.py" ]
##CMD [ "python", "/app/rapidocr_test.py" ]
##CMD [ "python", "trocr-test.py" ]
##CMD [ "python", "./src/testtrocr.py" ]
##CMD [ "python", "./src/ocr.py" ]
### Install Python 3.10 or newer
#RUN apt-get update && apt-get install -y --no-install-recommends \
#    python3 \
#    python3-pip \
#    python3-dev \
#    libsm6 \
#    libxext6 \
#    libxrender-dev \
#    libopencv-dev \
#    tesseract-ocr \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*
# Solution 1: Change to reliable mirrors and add retry logic
## Install Python 3.10 or newer
#RUN apt-get update && apt-get install -y --no-install-recommends \
#    python3 \
#    python3-pip \
#    python3-dev \
#    libsm6 \
#    libxext6 \
#    libxrender-dev \
#    tesseract-ocr \
#    libglib2.0-0 \
#    libgtk-3-0 \
#    libgl1-mesa-glx \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*
#RUN sed -i 's/archive.ubuntu.com/mirror.ubuntu.com/g' /etc/apt/sources.list && \
#    sed -i 's/security.ubuntu.com/mirror.ubuntu.com/g' /etc/apt/sources.list
#
#RUN apt-get clean && \
#    rm -rf /var/lib/apt/lists/* && \
#    apt-get update --fix-missing && \
#    apt-get install -y --no-install-recommends --fix-missing \
#    python3 \
#    python3-pip \
#    python3-dev \
#    libsm6 \
#    libxext6 \
#    libxrender-dev \
#    tesseract-ocr \
#    libglib2.0-0 \
#    libgtk-3-0 \
#    libgl1-mesa-glx \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*
# Don't change mirrors - use defaults and add better error handling
#CMD [ "python", "./src/test.py" ]
#
#RUN pip install --no-cache-dir torch==2.1.0+cu121 torchvision==0.16.0+cu121 -f https://download.pytorch.org/whl/cu121/torch_stable.html
#RUN pip install --no-cache-dir -r requirements.txt huggingface_hub[hf_xet]

    '''
    # list of replay code text
    replaycodes = []
    for case_index, images in enumerate(list_of_images):
        #print(f"code {index + 1}:")
        #single_time_start = time.time()
        # method 1, image to letters to text
        #code = process_code_vlm(crop, case_index, code_index)
        #single_time = time.time() - single_time_start
        #print(f"Time taken: {single_time}")

        # add code if not already added
        if code not in replaycodes:
            replaycodes.append(code)
        #gc.collect()
    '''
def process_code_vlm(crop, case_index, code_index):
    code = ""

    conversation = [
        {
            "role": "user",
            "content": [
                {"type": "image", "url": pil_image},
                {"type": "text", "text": prompt},
            ],
        },
    ]
    inputs = processor.apply_chat_template(
        conversation,
        add_generation_prompt=True,
        tokenize=True,
        return_dict=True,
        return_tensors="pt"
    ).to(device)
    output = model.generate(
        **inputs, 
        max_new_tokens=100,
        temperature=0.0, 
        do_sample=False
    )
    full_response = processor.decode(output[0], skip_special_tokens=True)
    pattern = r"<\|assistant\|>\s*(.*)"
    match = re.search(pattern, full_response, re.DOTALL)
    if match:
        code = match.group(1).strip()
    else:
        code = full_response.strip()

    code = code.upper()
    code = code.replace("O", "0")
    print(code)

    # default to ocr when not exactly 6 characters
    if len(code) != 6:
        code = ocr.process_code_mode2(crop, case_index, code_index)

    del output, inputs, full_response, pil_image, crop_copy, crop_resize
    gc.collect()

    return code


